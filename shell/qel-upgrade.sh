#!/usr/bin/env bash
set -o pipefail

###
#
# Upgrade the qjs-ext-lib to its latest version
#
# This script is supposed to be called when it has been installed in the nix store.
# Calling it directly won't work.
#
###

script_dir="$(cd "$(dirname "$(readlink -f "$0")")" && pwd)" || {
  echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2
  exit 2
}

# Created by argbash-init v2.10.0
# ARG_HELP([<Upgrade qjs-ext-lib to its latest version>])
# ARGBASH_SET_INDENT([  ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die() {
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}

begins_with_short_option() {
  local first_option all_short_options='h'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS

print_help() {
  printf '%s\n' "<Upgrade qjs-ext-lib to its latest version>"
  printf 'Usage: %s [-h|--help]\n' "$0"
  printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
  while test $# -gt 0; do
    _key="$1"
    case "$_key" in
    -h | --help)
      print_help
      exit 0
      ;;
    -h*)
      print_help
      exit 0
      ;;
    *)
      _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
      ;;
    esac
    shift
  done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

nix flake lock --update-input qjsExtLib && git add flake.lock || exit $?
echo "" 1>&2
echo "Please exit and re-enter the nix shell" 1>&2

# ] <-- needed because of Argbash
